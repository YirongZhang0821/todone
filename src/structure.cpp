#include "structure.h"

#include <QTextEdit>

#include "ui_structure.h"  // generated by uic

Structure::Structure(QWidget* parent)
    : QWidget(parent),
      ui(new Ui::root),
      mSqlDatabase(QSqlDatabase::addDatabase("QSQLITE")),
      mDoingSqlTableModel(new QSqlTableModel(this, mSqlDatabase)),
      mAchieveSqlTableModel(new QSqlTableModel(this, mSqlDatabase)),
      mDiscardSqlTableModel(new QSqlTableModel(this, mSqlDatabase)) {
    ui->setupUi(this);
    /*
    Sql Database
    */
    mSqlDatabase.setDatabaseName("todone.db");
    if (!mSqlDatabase.open()) qDebug() << "Error connection Sql Database";
    /*
    Sql Table
    */
    QSqlQuery query;
    query.exec(
        "create table if not exists todo\
      (id integer primary key,\
      event text not null,\
      priority text not null,\
      deadline text,\
      note text,\
      status integer not null)");
    query.exec(
        "create table if not exists credit\
      (id integer primary key,\
      event text not null,\
      belong text,\
      score double,\
      note text)");

    setupSqlTableModels();

    /*
    Connect
    */
    connect(ui->btnAddDoing, &QPushButton::clicked, this, &Structure::addTodoDoing);
    connect(ui->btnAchieveDoing, &QPushButton::clicked, this, &Structure::achieveTodoDoing);
    connect(ui->btnDiscardDoing, &QPushButton::clicked, this, &Structure::discardTodoDoing);
    connect(ui->btnSetDoing, &QPushButton::clicked, this, &Structure::setTodoDoing);
    connect(ui->btnSetDiscard, &QPushButton::clicked, this, &Structure::setTodoDiscard);
    connect(ui->btnDeleteDiscard, &QPushButton::clicked, this, &Structure::deleteTodoDiscard);
    
    /*
    Single click to edit
    */
    ui->sqlDoingTableView->setEditTriggers(QAbstractItemView::CurrentChanged | QAbstractItemView::SelectedClicked);
    ui->sqlAchieveTableView->setEditTriggers(QAbstractItemView::CurrentChanged | QAbstractItemView::SelectedClicked);
    ui->sqlDiscardTableView->setEditTriggers(QAbstractItemView::CurrentChanged | QAbstractItemView::SelectedClicked);
}

void Structure::setupSqlTableModel(QSqlTableModel* model, const QString& filter, QTableView* view) {
    model->setTable("todo");
    model->setFilter(filter);
    model->setEditStrategy(QSqlTableModel::OnFieldChange);
    model->select();
    view->setModel(model);
    view->hideColumn(0);  // hide id
    view->hideColumn(5);  // hide status
    view->setFont(mBaseFont);
}

void Structure::setupSqlTableModels() {
    setupSqlTableModel(mDoingSqlTableModel, "status = 0", ui->sqlDoingTableView);      // 0: doing
    setupSqlTableModel(mAchieveSqlTableModel, "status = 1", ui->sqlAchieveTableView);  // 1: achieve
    setupSqlTableModel(mDiscardSqlTableModel, "status = 2", ui->sqlDiscardTableView);  // 2: discard
}

Structure::~Structure() {
    delete mDoingSqlTableModel;
    delete mAchieveSqlTableModel;
    delete mDiscardSqlTableModel;
}

void Structure::addTodoDoing() {
    int curDoingRow = mDoingSqlTableModel->rowCount();
    mDoingSqlTableModel->insertRow(curDoingRow);

    QString curTime = QDateTime::currentDateTime().toString("yyyy-MM-dd HH");
    // event, priority, deadline, note, status
    QList<QVariant> data = {"event", "\u5f85\u529e", curTime, "note", 0};
    for (int i = 0; i < data.size(); ++i) {
        mDoingSqlTableModel->setData(mDoingSqlTableModel->index(curDoingRow, i + 1), data[i]);
    }
}

void Structure::updateTodoStatus(QSqlTableModel* model, QTableView* view, int status) {
    QModelIndex currentIndex = view->currentIndex();
    if (currentIndex.isValid()) {
        int selectedRow = currentIndex.row();
        model->setData(model->index(selectedRow, 5), status);
        model->submitAll();
        model->select();
    }
}

void Structure::achieveTodoDoing() {
    updateTodoStatus(mDoingSqlTableModel, ui->sqlDoingTableView, 1);
    mAchieveSqlTableModel->select();
}

void Structure::discardTodoDoing() {
    updateTodoStatus(mDoingSqlTableModel, ui->sqlDoingTableView, 2);
    mDiscardSqlTableModel->select();
}

void Structure::setTodoDoing() {
    updateTodoStatus(mAchieveSqlTableModel, ui->sqlAchieveTableView, 0);
    mDoingSqlTableModel->select();
}

void Structure::setTodoDiscard() {
    updateTodoStatus(mAchieveSqlTableModel, ui->sqlAchieveTableView, 2);
    mDiscardSqlTableModel->select();
}

void Structure::deleteTodoDiscard() {
    int curDiscardRow = ui->sqlDiscardTableView->currentIndex().row();
    mDiscardSqlTableModel->removeRow(curDiscardRow);
    mDiscardSqlTableModel->submitAll();
    mDiscardSqlTableModel->select();
}

